The ``2-matrix_divided`` module
======================

Using ``matrix_divided``
-------------------

This is an 2-matrix_divided text file in reStructuredText format.  First import
``matrix_divided`` from the ``2-matrix_divided`` module:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Now use it:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

    >>> matrix_divided([[1, 2, 3], [4, "5", 6]], 2) # doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], "4") # doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

    >>> matrix_divided([[1, 2, 3], [4, 5]], 2) # doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size
    >>> matrix_divided([[3]], 3)
    [[1.0]]
    >>> matrix_divided() # doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    >>> matrix_divided([[]])
    Traceback (most recent call last):
        ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'
    >>> matrix = [[10, 8], [5, 10]]
    >>> div = 2
    >>> len(matrix_divided(matrix, div)) == len(matrix)
    True
    >>> matrix_divided([[9]], "9jlkj")
    Traceback (most recent call last):
        ...
    TypeError: div must be a number
    >>> matrix_divided([[9]], float('inf'))
    [[0.0]]
    >>> matrix_divided([["9",8][9,"9"]], 8) # doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

